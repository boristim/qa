<?php
/**
 * Created by PhpStorm.
 * User: salem
 * Date: 03.04.2019
 * Time: 22:40
 */
define('QA_DEFAULT_TITLE', 'some title');
/**
 * Implements hook_views_pre_render().
 */
function qa_views_pre_render(&$view) {
  if ($view->name == 'question' && $view->current_display == 'page') {
    $view->build_info['title'] = $view->build_info['substitutions']['%1'];
  }
}

/**
 * Implements hook_form_alter().
 */
function qa_form_alter(&$form, &$form_state, $form_id) {
//  dpm($form_id);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function qa_form_answer_node_form_alter(&$form, &$form_state, $form_id) {
  $files = (isset($form_state['build_info']['files'])) ? $form_state['build_info']['files'] : array();
  $files[] = drupal_get_path('module', 'node') . '/node.pages.inc';
  $form_state['build_info']['files'] = $files;
  if (!isset($form['nid']['#value'])) {
    $form['field_question_ref']['#access'] = false;
    $form['field_question_ref']['und']['#options'] = [];
    if (($question = node_load(arg(1))) && ($question->type = 'question')) {
      $form['field_question_ref'][LANGUAGE_NONE]['#options'] = [$question->nid => $question->title];
      $form['field_question_ref'][LANGUAGE_NONE]['#default_value'] = [$question->nid];
      $form_state['values']['field_question_ref']['und'][0]['target_id'] = $question->nid;
    }
    $form['title']['#access'] = false;
    $form['title']['#default_value'] = QA_DEFAULT_TITLE;
    $form['field_rate']['#access'] = user_access('edit any answer content');
    if (!user_access('edit any answer content')) {
      $form['field_video_link']['#attributes']['class'][] = 'element-invisible';
      $form['field_qa_picture']['#attributes']['class'][] = 'element-invisible';
    }
    $form['#submit'][] = '_qa_form_answer_node_form_submit';
    $form['#validate'][] = '_qa_form_answer_node_form_validate';
    foreach ($form as $name => &$element) {
      if (is_array($element) && isset($element['#type'])
        && ($element['#type'] == 'fieldset')) {
        $element['#access'] = user_access('edit any question content');
      }
    }
    $form['body'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Give your answer');
    $form['body'][LANGUAGE_NONE][0]['value']['#attributes']['required'] = 'required';

  }
  if (!user_access('edit any question content')) {
    $js = <<<JS
(function ($) {
  Drupal.behaviors.qa_module = {
    attach: function (context, settings) {
      $(document).on('change', '#edit-field-qa-picture-und-0-upload', function (t) {
        $('label[for=edit-field-qa-picture-und-0-upload]').text(t.currentTarget.files[0].name);
        return false;
      })
      $(document).on('click', '#submit_answer_button', function (e) {
        $('#edit-submit--2').trigger('click');
        return false;
      })
      $(document).on('click', '#add_smile_button', function (e) {        
        if (e.target.id == 'img_add_smile_button') {
          $(this).find('ul').toggle('normal');
        }
        if(e.target.id == ""){          
          t = $('#edit-body-und-0-value').val() + ' ' + e.target.innerText;
          $('#edit-body-und-0-value').val(t);          
        }
        return false;
      });
      $(document).on('click', '#add_media_button', function (e) {
        if (e.target.id == 'img_add_media_button') {
          $(this).find('ul').toggle('normal');
        }
        if (e.target.id == 'label-edit-field-qa-picture-und-0-upload') {
          $('#edit-field-qa-picture-und-0-upload').trigger('click');
        }
        if (e.target.id == 'label-edit-field-video-link-und-0-value') {
          var video = window.prompt('Вставьте ссылку на youtube.com или на youtu.be', '');
          if ((!!video) && (video.length > 1)) {
            $('#edit-field-video-link-und-0-value').val(video);
            $('#label-edit-field-video-link-und-0-value').text(video);
          }
        }
        return false;
      })
    }
  };
})(jQuery);
    
JS;
    $css = <<<CSS
#edit-actions--2,
#edit-field-qa-picture-und-0-ajax-wrapper{
  opacity:0;
  height:1px;
  width:1px;
  overflow:hidden
}
CSS;
    $insert_image_title = t('Photo');
    $insert_video_title = t('Video');
    $emojies = [
      '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇',
      '🙂', '🙃', '😉', '😌', '😍', '😘', '😗', '😙', '😚', '😋',
      '😛', '😝', '😜', '🤓', '😎', '😏', '😒', '😞', '😔', '😟',
      '😕', '🙁', '😣', '😖', '😫',
    ];
    $emolist = '';
    foreach ($emojies as $npp => $emo) {
      $emolist .= "<li>$emo</li>";
    }
    $html = <<<HTML
<div id="answer_controls">
  <a href="#" id="add_media_button">
    <img id="img_add_media_button" src="/sites/default/files/theme-img/add-media.svg" alt="add media">
    <ul id="add_media_popup">
      <li><label id="label-edit-field-qa-picture-und-0-upload" for="edit-field-qa-picture-und-0-upload" class="">$insert_image_title</label></li>
      <li><label id="label-edit-field-video-link-und-0-value" class="">$insert_video_title</label></li>
    </ul>
  </a>
  <a href="#" id="add_smile_button">
    <img id="img_add_smile_button" src="/sites/default/files/theme-img/add-smile.svg" alt="add smile">
    <ul id="add_smile_popup">
$emolist
    </ul>
  </a>
  <a href="#" id="submit_answer_button">
  <img class="normal" src="/sites/default/files/theme-img/answer-submit.svg" alt="answer submit">
  <img class="hover" src="/sites/default/files/theme-img/answer-submit-hover.png" alt="answer submit">
  </a>
</div>


HTML;

    $form['upload_button'] = ['#markup' => $html, '#weight' => -3.5];
    $form['#attached']['js'][] = ['data' => $js, 'type' => 'inline'];
    $form['#attached']['css'][] = ['data' => $css, 'type' => 'inline'];
    $form['actions']['submit']['#attrributes']['class'][] = 'element-invisible';
  }

//  dpm($form);
}

function _qa_form_answer_node_form_validate($form, &$form_state) {
  if (!user_access('create answer content')) {
//    drupal_set_message(t('A confirmation email has been sent to you.'));
  }

}

function _qa_form_answer_node_form_submit($form, &$form_state) {

  if (!user_access('edit any answer content')) {
    drupal_set_message(t('Your answer will be published after moderation'));
  }
  $_GET['destination'] = '/question/' . arg(1);
}

/**
 * Implements hook_node_submit().
 */
function qa_node_submit($node, $form, &$form_state) {
  switch ($node->type) {
    case 'answer':

      $video = '';
      if (isset($form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value']) &&
        mb_strlen($form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value'])
      ) {
        $video = $form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value'];
      }
      if ($video) {
        if (mb_strpos($video, 'outu.be/') > 0) {
          $video = explode('.be/', $video);
          $video = array_key_exists(1, $video) ? $video[1] : '';
        } elseif ((mb_strpos($video, 'outube.com') > 0)
          && ($video = parse_url($video, PHP_URL_QUERY))
        ) {
          parse_str($video, $video);
          $video = array_key_exists('v', $video) ? $video['v'] : '';
        }
      }
      if ($video) {
        $node->field_video_link[LANGUAGE_NONE][0]['value'] = $video;
      } else {
        $node->field_video_link[LANGUAGE_NONE][0]['value'] = '';
      }
      $title = iconv('utf-8', 'windows-1251//IGNORE', $node->body[LANGUAGE_NONE][0]['value']);
      $title = iconv('windows-1251', 'utf-8//IGNORE', $title);
      if (!mb_strlen($title)) {
        $title = "Answer " . time();
      }
      $node->title = mb_substr($title, 0, 60);

      $node->status = user_access('edit any question content') ? 1 : 0;
      if ((!isset($node->nid)) && (arg(0) == 'question')) {
        $node->field_question_ref[LANGUAGE_NONE][0]['target_id'] = arg(1);
      }
      break;
    case 'question':
      $node->title = mb_substr($node->field_question[LANGUAGE_NONE][0]['value'], 0, 255);
      $node->status = user_access('edit any question content') ? 1 : 0;
      break;
    case 'video_lefft':
      $video = '';
      if (isset($form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value']) &&
        mb_strlen($form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value'])
      ) {
        $video = $form_state['values']['field_video_link'][LANGUAGE_NONE][0]['value'];
      }
      if ($video) {
        if (mb_strpos($video, 'outu.be/') > 0) {
          $video = explode('.be/', $video);
          $video = array_key_exists(1, $video) ? $video[1] : '';
        } elseif ((mb_strpos($video, 'outube.com') > 0)
          && ($video = parse_url($video, PHP_URL_QUERY))
        ) {
          parse_str($video, $video);
          $video = array_key_exists('v', $video) ? $video['v'] : '';
        }
      }
      if ($video) {
        $node->field_video_link[LANGUAGE_NONE][0]['value'] = $video;
      } else {
        $node->field_video_link[LANGUAGE_NONE][0]['value'] = '';
      }
      break;
    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qa_form_question_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $form['title']['#access'] = false;
  $form['title']['#default_value'] = QA_DEFAULT_TITLE;

  $form['field_seo_pictire']['#access'] =
  $form['field_seo_rating']['#access'] =
  $form['field_seo_bottom']['#access'] =
  $form['field_question_details']['#access'] =
  $form['field_categories']['#access'] =
  $form['field_rate']['#access'] =
  $form['field_view_count']['#access'] = user_access('edit any question content');
  $form['#submit'][] = '_qa_form_question_node_form_submit';
  $form['#validate'][] = '_qa_form_question_node_form_validate';
  foreach ($form as $name => &$element) {
    if (is_array($element) && isset($element['#type'])
      && ($element['#type'] == 'fieldset')) {
      $element['#access'] = user_access('edit any question content');
    }
  }
  $form['field_username'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Introduce youreself');
  $form['field_username'][LANGUAGE_NONE][0]['value']['#attributes']['required'] = 'required';
  $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Your e-mail');
  $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#attributes']['required'] = 'required';
  $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#attributes'][' type'] = 'email';
  $form['field_question'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Your question');
  $form['field_question'][LANGUAGE_NONE][0]['value']['#attributes']['required'] = 'required';

  $form['field_qa_picture'][LANGUAGE_NONE][0]['#title_display'] =
  $form['field_username'][LANGUAGE_NONE][0]['value']['#title_display'] =
  $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#title_display'] =
  $form['field_question'][LANGUAGE_NONE][0]['value']['#title_display'] = 'invisible';

  if ($user->uid) {
    $form['field_username'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->name;
    $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
    $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#disabled'] =
    $form['field_username'][LANGUAGE_NONE][0]['value']['#disabled'] = true;
  } else {
    $form['field_username'][LANGUAGE_NONE][0]['value']['#default_value'] =
    $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#default_value'] = '';
  }
  $form['actions']['submit']['#value'] = t('Send');
//  dpm($form);
}

function _qa_form_question_node_form_validate($form, &$form_state) {
  if (!user_access('create question content')) {
//    drupal_set_message(t('For question you must be authorised'));
//    drupal_goto('user/login');
  }
}

function _qa_form_question_node_form_submit($form, &$form_state) {
  if (!user_access('edit any question content')) {
    drupal_set_message(t('Your question will be published after review by administration'));;
  }
  if (!$GLOBALS['user']->uid) {
    $name = $form_state['values']['field_username']['und'][0]['value'];
    $mail = $form_state['values']['field_e_mail']['und'][0]['value'];
    if ($params['account'] = user_load_by_mail($mail)) {
      drupal_mail('user', 'password_reset', $mail, null, array('account' => $params['account']), variable_get('site_mail', 'me@localhost.com'));
      drupal_set_message(t('Reset password instructions sent to your e-mail'));
    } else {
      $password = user_password(8);
      $fields = [
        'name' => $name,
        'mail' => $mail,
        'pass' => $password,
        'status' => 1,
        'init' => 'email address',
        'roles' => [DRUPAL_AUTHENTICATED_RID => 'authenticated user',],
      ];
      try {
        $account = user_save('', $fields);
      } catch (Exception $exception) {
        watchdog(__FUNCTION__, $exception->getMessage());
      }
      drupal_mail('user', 'password_reset', $mail, NULL, array('account' => $account), variable_get('site_mail', 'me@localhost.com'));
      drupal_set_message(t('Init account instructions sent to your e-mail'));
    }
  }
  $_GET['destination'] = '/';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qa_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['css'][] = ['data' => '#edit-locale,#edit-timezone{display:none}', 'type' => 'inline'];
}

/**
 * Implements hook_variable_info().
 */
function qa_variable_info($options) {
  $variable['site_phone'] = [
    'title' => t('Site phone'),
    'type' => 'string',
    'default' => '8(347)255-92-78',
    'group' => 'site_information',
    'access' => user_access('access content')
  ];
  return $variable;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qa_form_video_lefft_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#default_value'] = 'Some video ' . time();
}


function _qa_emoji_list() {
  $imgs = [

  ];


}
